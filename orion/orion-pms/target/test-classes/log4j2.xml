<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE xml>
<Configuration status="WARN" monitorInterval="30">
	<properties>
		<property name="LOG_HOME">C:/logs/orion</property>
		<!-- <property name="LOG_HOME">/var/log/orion</property> --><!-- linux系统日志目录 -->
		<property name="PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %t %-5p [%F:%L] - %m%n</property>
	</properties>
	<appenders>

		<!-- trace控制台 -->
		<Console name="console_trace_log" target="SYSTEM_OUT">
			<PatternLayout pattern="${PATTERN}" />
			<ThresholdFilter level="trace" onMatch="ACCEPT"
				onMismatch="DENY" />
		</Console>

		<!-- debug控制台 -->
		<Console name="console_debug_log" target="SYSTEM_OUT">
			<PatternLayout pattern="${PATTERN}" />
			<ThresholdFilter level="debug" onMatch="ACCEPT"
				onMismatch="DENY" />
		</Console>

		<!-- info控制台 -->
		<Console name="console_info_log" target="SYSTEM_ERR">
			<PatternLayout pattern="${PATTERN}" />
			<ThresholdFilter level="info" onMatch="ACCEPT"
				onMismatch="DENY" />
		</Console>

		<!-- warn控制台 -->
		<Console name="console_warn_log" target="SYSTEM_ERR">
			<PatternLayout pattern="${PATTERN}" />
			<ThresholdFilter level="warn" onMatch="ACCEPT"
				onMismatch="DENY" />
		</Console>

		<!-- error控制台 -->
		<Console name="console_error_log" target="SYSTEM_ERR">
			<PatternLayout pattern="${PATTERN}" />
			<ThresholdFilter level="error" onMatch="ACCEPT"
				onMismatch="DENY" />
		</Console>

		<!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
		<!--append为TRUE表示消息增加到指定文件中，false表示消息覆盖指定的文件内容，默认值是true -->
		<File name="test_log" fileName="${LOG_HOME}/dev.log" append="false">
			<PatternLayout pattern="${PATTERN}" />
		</File>

		<!-- total log -->
		<RollingRandomAccessFile name="total_log"
			fileName="${LOG_HOME}/total.log"
			filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/total/total-%d{yyyy-MM-dd HH-mm}-%i.log">
			<PatternLayout pattern="${PATTERN}" />
			<Policies>
				<SizeBasedTriggeringPolicy size="100 MB" /><!-- 
					文件达到50m时，会创建新的日志文件 -->
			</Policies>
			<!-- 删除30天之前的日志 -->
			<DefaultRolloverStrategy>
				<Delete basePath="${LOG_HOME}" maxDepth="3">
					<IfFileName glob="*/*/total-*.log" />
					<IfLastModified age="30d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingRandomAccessFile>

		<!-- trace log -->
		<RollingRandomAccessFile name="trace_log"
			fileName="${LOG_HOME}/trace.log"
			filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/trace/trace-%d{yyyy-MM-dd HH-mm}-%i.log">
			<PatternLayout pattern="${PATTERN}" />
			<Policies>
				<SizeBasedTriggeringPolicy size="50 MB" /><!-- 
					文件达到50m时，会创建新的日志文件 -->
			</Policies>
			<Filters>
				<!-- 过滤debug及以上的日志信息 -->
				<ThresholdFilter level="debug" onMatch="DENY"
					onMismatch="NEUTRAL" />
				<!-- 保留trace级别的日志 -->
				<ThresholdFilter level="trace" onMatch="ACCEPT"
					onMismatch="DENY" />
			</Filters>
			<DefaultRolloverStrategy>
				<Delete basePath="${LOG_HOME}" maxDepth="3">
					<IfFileName glob="*/*/trace-*.log" />
					<IfLastModified age="30d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingRandomAccessFile>

		<!-- debug log -->
		<RollingRandomAccessFile name="debug_log"
			fileName="${LOG_HOME}/debug.log"
			filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/debug/debug-%d{yyyy-MM-dd HH-mm}-%i.log">
			<PatternLayout pattern="${PATTERN}" />
			<Policies>
				<SizeBasedTriggeringPolicy size="50 MB" /><!-- 
					文件达到50m时，会创建新的日志文件 -->
			</Policies>
			<Filters>
				<ThresholdFilter level="info" onMatch="DENY"
					onMismatch="NEUTRAL" />
				<ThresholdFilter level="debug" onMatch="ACCEPT"
					onMismatch="DENY" />
			</Filters>
			<DefaultRolloverStrategy>
				<Delete basePath="${LOG_HOME}" maxDepth="3">
					<IfFileName glob="*/*/debug-*.log" />
					<IfLastModified age="30d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingRandomAccessFile>

		<!-- info log -->
		<RollingRandomAccessFile name="info_log"
			fileName="${LOG_HOME}/info.log"
			filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/info/info-%d{yyyy-MM-dd HH-mm}-%i.log">
			<PatternLayout pattern="${PATTERN}" />
			<Policies>
				<SizeBasedTriggeringPolicy size="50 MB" /><!-- 
					文件达到50m时，会创建新的日志文件 -->
			</Policies>
			<Filters>
				<ThresholdFilter level="warn" onMatch="DENY"
					onMismatch="NEUTRAL" />
				<ThresholdFilter level="info" onMatch="ACCEPT"
					onMismatch="DENY" />
			</Filters>
			<DefaultRolloverStrategy>
				<Delete basePath="${LOG_HOME}" maxDepth="3">
					<IfFileName glob="*/*/info-*.log" />
					<IfLastModified age="30d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingRandomAccessFile>

		<!-- warn log -->
		<RollingRandomAccessFile name="warn_log"
			fileName="${LOG_HOME}/warn.log"
			filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/warn/warn-%d{yyyy-MM-dd HH-mm}-%i.log">
			<PatternLayout pattern="${PATTERN}" />
			<Policies>
				<SizeBasedTriggeringPolicy size="50 MB" /><!-- 
					文件达到50m时，会创建新的日志文件 -->
			</Policies>
			<Filters>
				<ThresholdFilter level="error" onMatch="DENY"
					onMismatch="NEUTRAL" />
				<ThresholdFilter level="warn" onMatch="ACCEPT"
					onMismatch="DENY" />
			</Filters>
			<DefaultRolloverStrategy>
				<Delete basePath="${LOG_HOME}" maxDepth="3">
					<IfFileName glob="*/*/warn-*.log" />
					<IfLastModified age="30d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingRandomAccessFile>

		<!-- error log -->
		<RollingRandomAccessFile name="error_log"
			fileName="${LOG_HOME}/error.log"
			filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/error/error-%d{yyyy-MM-dd HH-mm}-%i.log">
			<PatternLayout pattern="${PATTERN}" />
			<Policies>
				<SizeBasedTriggeringPolicy size="50 MB" /><!-- 
					文件达到50m时，会创建新的日志文件 -->
			</Policies>
			<Filters>
				<ThresholdFilter level="error" onMatch="ACCEPT"
					onMismatch="DENY" />
			</Filters>
			<DefaultRolloverStrategy>
				<Delete basePath="${LOG_HOME}" maxDepth="3">
					<IfFileName glob="*/*/error-*.log" />
					<IfLastModified age="30d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingRandomAccessFile>

		<!-- orion servlet 应用数据 -->
		<RollingRandomAccessFile name="orion_log"
			fileName="${LOG_HOME}/orion.log"
			filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/orion/orion-%d{yyyy-MM-dd HH-mm}-%i.log">
			<PatternLayout pattern="${PATTERN}" />
			<Policies>
				<SizeBasedTriggeringPolicy size="100 MB" /><!-- 
					文件达到50m时，会创建新的日志文件 -->
			</Policies>
			<DefaultRolloverStrategy>
				<Delete basePath="${LOG_HOME}" maxDepth="3">
					<IfFileName glob="*/*/orion-*.log" />
					<IfLastModified age="30d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingRandomAccessFile>

		<!-- druid servlet 应用数据 -->
		<RollingRandomAccessFile name="druid_log"
			fileName="${LOG_HOME}/druid.log"
			filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/druid/druid-%d{yyyy-MM-dd HH-mm}-%i.log">
			<PatternLayout pattern="${PATTERN}" />
			<Policies>
				<SizeBasedTriggeringPolicy size="100 MB" /><!-- 
					文件达到50m时，会创建新的日志文件 -->
			</Policies>
			<DefaultRolloverStrategy>
				<Delete basePath="${LOG_HOME}" maxDepth="3">
					<IfFileName glob="*/*/druid-*.log" />
					<IfLastModified age="30d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingRandomAccessFile>

	</appenders>
	<Loggers>

		<!-- 设置第三方日志系统 -->
		<logger name="org.springframework.security" level="WARN" />
		<logger name="org.springframework" level="WARN" />
		<logger name="org.hibernate" level="WARN" />
		<logger name="com.opensource.dbhelp" level="WARN" />
		<logger name="com.google" level="WARN" />
		<logger name="org.mybatis" level="WARN" />
		<logger name="org.apache.ibatis" level="WARN" />
		<logger name="org.mongodb.driver" level="WARN" />
		<logger name="org.apache.commons" level="WARN" />

		<logger name="com.orion" level="DEBUG">
			<appender-ref ref="orion_log" />
		</logger>

		<!-- druid 日志配置 -->
		<logger name="druid.sql.DataSource" level="WARN">
			<appender-ref ref="druid_log" />
		</logger>

		<logger name="druid.sql.Connection" level="WARN">
			<appender-ref ref="druid_log" />
		</logger>

		<logger name="druid.sql.Statement" level="WARN">
			<appender-ref ref="druid_log" />
		</logger>

		<logger name="druid.sql.ResultSet" level="WARN">
			<appender-ref ref="druid_log" />
		</logger>

		<!-- 配置日志的根节点 -->
		<root level="DEBUG">
			<appender-ref ref="console_debug_log" />
			<appender-ref ref="test_log" />
			<appender-ref ref="total_log" />
			<appender-ref ref="trace_log" />
			<appender-ref ref="debug_log" />
			<appender-ref ref="info_log" />
			<appender-ref ref="warn_log" />
			<appender-ref ref="error_log" />
		</root>

	</Loggers>
</Configuration> 